/* Generated by wayland-scanner 1.18.0 */

#ifndef HWBUF_SERVER_PROTOCOL_H
#define HWBUF_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_hwbuf The hwbuf protocol
 * Create wl_buffer objects from Android HardwareBuffers
 *
 * @section page_desc_hwbuf Description
 *
 * The Android graphics stack doesn't use the same mechanism as regular Linux for sharing graphics buffers. HardwareBuffer objects are used instead. This extension allows clients to use HardwareBuffers as backing buffers for wl_buffer objects, enabling native GLES and vulkan usage for clients on Android.
 *
 * @section page_ifaces_hwbuf Interfaces
 * - @subpage page_iface_hwbuf_manager - Create wl_buffer objects from Android HardwareBuffers
 * @section page_copyright_hwbuf Copyright
 * <pre>
 *
 * TODO choose license, probably MIT
 * </pre>
 */
struct hwbuf_manager;

/**
 * @page page_iface_hwbuf_manager hwbuf_manager
 * @section page_iface_hwbuf_manager_desc Description
 *
 * This global object allows clients create wl_buffers associated with a HardwareBuffer.
 * To initialize call set_socket and wait for the socket_received event.
 * After that create_buffer can be called.
 *
 * To destroy the wl_buffer objects, the client has to unmap the buffer memory (if mapped), release bindings to GLES and Vulkan and then destroy the HardwareBuffer, in addition to destroying the wl_buffer object.
 * @section page_iface_hwbuf_manager_api API
 * See @ref iface_hwbuf_manager.
 */
/**
 * @defgroup iface_hwbuf_manager The hwbuf_manager interface
 *
 * This global object allows clients create wl_buffers associated with a HardwareBuffer.
 * To initialize call set_socket and wait for the socket_received event.
 * After that create_buffer can be called.
 *
 * To destroy the wl_buffer objects, the client has to unmap the buffer memory (if mapped), release bindings to GLES and Vulkan and then destroy the HardwareBuffer, in addition to destroying the wl_buffer object.
 */
extern const struct wl_interface hwbuf_manager_interface;

/**
 * @ingroup iface_hwbuf_manager
 * @struct hwbuf_manager_interface
 */
struct hwbuf_manager_interface {
	/**
	 * Disconnect from the interface
	 *
	 * The interface is no longer accessible by the client after
	 * this. All wl_buffer objects stay valid.
	 */
	void (*destroy)(struct wl_client *client,
			struct wl_resource *resource);
	/**
	 * Set a unix socket as the HardwareBuffer transfer channel
	 *
	 * The wire format for HardwareBuffers isn't stable, so they
	 * can't be transferred in this protocol. The Android NDK has
	 * stable functions for transferring them over unix sockets though,
	 * so this will be used to transfer them. If another socket was
	 * already set for this client, the compositor closes the
	 * connection and uses the new one instead. The socket_received
	 * event is fired when the socket is received and ready for use.
	 * @param fd the unix socket file descriptor
	 */
	void (*set_socket)(struct wl_client *client,
			   struct wl_resource *resource,
			   int32_t fd);
	/**
	 * Create a wl_buffer and receive a HardwareBuffer as the backing storage
	 *
	 * The compositor will create a HardwareBuffer and corresponding
	 * wl_buffer. The hardware buffer is send over the previously set
	 * socket. The format used will be XRGB8888.
	 * @param width the width in pixels
	 * @param height the height in pixels
	 * @param interface name of the objects interface
	 * @param version version of the objects interface
	 * @param id the new buffer
	 */
	void (*create_buffer)(struct wl_client *client,
			      struct wl_resource *resource,
			      uint32_t width,
			      uint32_t height,
			      const char *interface, uint32_t version, uint32_t id);
};

#define HWBUF_MANAGER_SOCKET_RECEIVED 0

/**
 * @ingroup iface_hwbuf_manager
 */
#define HWBUF_MANAGER_SOCKET_RECEIVED_SINCE_VERSION 1

/**
 * @ingroup iface_hwbuf_manager
 */
#define HWBUF_MANAGER_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_hwbuf_manager
 */
#define HWBUF_MANAGER_SET_SOCKET_SINCE_VERSION 1
/**
 * @ingroup iface_hwbuf_manager
 */
#define HWBUF_MANAGER_CREATE_BUFFER_SINCE_VERSION 1

/**
 * @ingroup iface_hwbuf_manager
 * Sends an socket_received event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
hwbuf_manager_send_socket_received(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, HWBUF_MANAGER_SOCKET_RECEIVED);
}

#ifdef  __cplusplus
}
#endif

#endif
